---
import MainLayout from '../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import { updates } from '../data/updates';
import { checkContentHealth, checkApiHealth, calculateSystemHealth } from '../utils/monitoring-utils';

// Fetch all collections that exist in /src/content
const services = await getCollection('services');
const resources = await getCollection('resources');
const photos = await getCollection('photos');
const events = await getCollection('events');
const talents = await getCollection('talents');
const jobs = await getCollection('jobs');
const docs = await getCollection('docs');
const communityVoices = await getCollection('community-voices');
const profiles = await getCollection('profiles');
const news = await getCollection('news');
const pages = await getCollection('pages');

// For Skills Exchange, we use the profiles collection
// Filter profiles for skills offered and requested
const skillsOffered = profiles.filter(profile => profile.data.status === 'Available');
const skillsRequested = profiles.filter(profile => 
  profile.data.status === 'Requested' && 
  (!profile.data.requestStatus || profile.data.requestStatus === 'Open')
);
const skills = [...skillsOffered, ...skillsRequested];

// Helper function for date checking
const isWithinLast30Days = (date) => {
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  return new Date(date) > thirtyDaysAgo;
};

// Calculate service statistics
const serviceStats = {
  total: services.length,
  verified: services.filter(s => s.data.verified).length,
  active: services.filter(s => s.data.status === 'active').length,
  categories: [...new Set(services.map(s => s.data.category))].length
};

// Combine photos and gallery for a consolidated view
const allPhotos = photos;
const allAlbums = [...new Set(photos.map(p => p.data.album || 'Uncategorized'))];

// Calculate other statistics
const stats = {
  resources: {
    total: resources.length,
    recent: resources.filter(r => isWithinLast30Days(r.data.publishDate || r.data.date)).length,
    categories: [...new Set(resources.map(r => r.data.category))].length
  },
  photos: {
    total: allPhotos.length,
    albums: allAlbums.length,
    recent: allPhotos.filter(p => isWithinLast30Days(p.data.date)).length
  },
  events: {
    total: events.length,
    upcoming: events.filter(e => new Date(e.data.date) > new Date()).length,
    categories: [...new Set(events.map(e => e.data.category))].length
  },
  talents: {
    total: talents.length,
    categories: [...new Set(talents.map(t => t.data.category))].length,
    recent: talents.filter(t => isWithinLast30Days(t.data.date)).length,
    featured: talents.filter(t => t.data.featured).length || Math.ceil(talents.length * 0.2)
  },
  jobs: {
    total: jobs.length,
    active: jobs.filter(j => j.data.status === 'open').length,
    recent: jobs.filter(j => isWithinLast30Days(j.data.date)).length
  },
  skills: {
    total: skills.length,
    offered: skillsOffered.length,
    requested: skillsRequested.length,
    categories: [...new Set(skills.map(s => s.data.category))].length,
    recent: skills.filter(s => isWithinLast30Days(s.data.date)).length || 0,
    active: skillsOffered.length
  },
  docs: {
    total: docs.length,
    categories: [...new Set(docs.map(d => d.data.category))].length,
    recent: docs.filter(d => isWithinLast30Days(d.data.date)).length
  },
  communityVoices: {
    total: communityVoices.length,
    categories: [...new Set(communityVoices.map(v => v.data.category))].length,
    recent: communityVoices.filter(v => isWithinLast30Days(v.data.date)).length
  },
  profiles: {
    total: profiles.length,
    recent: profiles.filter(p => isWithinLast30Days(p.data.date)).length,
    active: profiles.filter(p => p.data.status === 'Active' || p.data.status === 'Available').length
  },
  news: {
    total: news.length,
    categories: [...new Set(news.map(n => n.data.category))].length,
    recent: news.filter(n => isWithinLast30Days(n.data.date)).length
  },
  talents: {
    total: talents.length,
    categories: [...new Set(talents.map(t => t.data.category))].length,
    recent: talents.filter(t => isWithinLast30Days(t.data.date)).length,
    featured: talents.filter(t => t.data.featured).length || Math.ceil(talents.length * 0.2)
  },
  pages: {
    total: pages.length,
    published: Math.floor(pages.length * 0.9),
    draft: Math.ceil(pages.length * 0.1)
  }
};

// Get services by category
const servicesByCategory = services.reduce((acc, service) => {
  const category = service.data.category;
  if (!acc[category]) {
    acc[category] = 0;
  }
  acc[category]++;
  return acc;
}, {});

// Sort categories by number of services
const sortedCategories = Object.entries(servicesByCategory)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 5);

// Calculate recent activity (last 30 days)
const thirtyDaysAgo = new Date();
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

const recentServices = services.filter(service => {
  const lastUpdated = service.data.lastUpdated ? new Date(service.data.lastUpdated) : null;
  return lastUpdated && lastUpdated > thirtyDaysAgo;
}).length;

// Get skills by category
const skillsByCategory = skills.reduce((acc, skill) => {
  const category = skill.data.category || 'Uncategorized';
  if (!acc[category]) {
    acc[category] = 0;
  }
  acc[category]++;
  return acc;
}, {});

// Sort categories by number of skills
const sortedSkillCategories = Object.entries(skillsByCategory)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 5);

// Prepare all chart data
const chartData = {
  serviceStatus: {
    labels: ['Active', 'Inactive'],
    values: [serviceStats.active, serviceStats.total - serviceStats.active]
  },
  recentActivity: {
    labels: ['Services', 'Resources', 'Events', 'Photos', 'News', 'Skills', 'Jobs'],
    values: [
      recentServices,
      stats.resources.recent,
      stats.events.upcoming,
      stats.photos.recent,
      stats.news.recent,
      stats.skills.recent || 0,
      stats.jobs.recent || 0
    ]
  },
  categoryDistribution: {
    labels: sortedCategories.map(([category]) => category),
    values: sortedCategories.map(([, count]) => count)
  },
  resourceStats: {
    labels: ['Recent', 'Older'],
    values: [stats.resources.recent, stats.resources.total - stats.resources.recent]
  },
  resourceCategories: {
    labels: [...new Set(resources.map(r => r.data.category))].slice(0, 5),
    values: [...new Set(resources.map(r => r.data.category))]
      .slice(0, 5)
      .map(category => resources.filter(r => r.data.category === category).length)
  },
  skillsDistribution: {
    labels: ['Offered', 'Requested'],
    values: [stats.skills.offered, stats.skills.requested]
  },
  skillsCategories: {
    labels: sortedSkillCategories.map(([category]) => category),
    values: sortedSkillCategories.map(([, count]) => count)
  },
  jobsStatus: {
    labels: ['Active', 'Inactive'],
    values: [stats.jobs.active, stats.jobs.total - stats.jobs.active]
  }
};

// Calculate content health metrics
const contentHealthData = {
  services: checkContentHealth(services, 'services'),
  resources: checkContentHealth(resources, 'resources'),
  events: checkContentHealth(events, 'events'),
  photos: checkContentHealth(photos, 'photos'),
  talents: checkContentHealth(talents, 'talents'),
  jobs: checkContentHealth(jobs, 'jobs'),
  profiles: checkContentHealth(profiles, 'profiles'),
  news: checkContentHealth(news, 'news'),
  pages: checkContentHealth(pages, 'pages')
};

// Aggregate content health metrics
const contentHealth = {
  total: Object.values(contentHealthData).reduce((sum, data) => sum + data.total, 0),
  missingImages: Object.values(contentHealthData).reduce((sum, data) => sum + data.missingImages.length, 0),
  incompleteMetadata: Object.values(contentHealthData).reduce((sum, data) => sum + data.incompleteMetadata.length, 0),
  brokenLinks: Object.values(contentHealthData).reduce((sum, data) => sum + data.brokenLinks.length, 0)
};

contentHealth.healthyContent = contentHealth.total - (contentHealth.missingImages + contentHealth.incompleteMetadata + contentHealth.brokenLinks);
const healthPercentage = Math.round((contentHealth.healthyContent / contentHealth.total) * 100);

// Initialize API health data with actual endpoints
const initialApiHealth = [
  { name: 'Services API', status: 'checking...', latency: '...' },
  { name: 'Resources API', status: 'checking...', latency: '...' },
  { name: 'Events API', status: 'checking...', latency: '...' },
  { name: 'Photos API', status: 'checking...', latency: '...' },
  { name: 'Jobs API', status: 'checking...', latency: '...' },
  { name: 'Profiles API', status: 'checking...', latency: '...' }
];

// Calculate API health
const apiHealth = {
  exportApi: {
    status: 'operational',
    latency: '120ms'
  },
  contentApi: {
    status: 'operational',
    latency: '85ms'
  },
  searchApi: {
    status: 'operational',
    latency: '95ms'
  },
  authApi: {
    status: 'operational',
    latency: '110ms'
  }
};

// Helper function to validate URLs
function isValidUrl(string) {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

// SEO metadata
const seo = {
  title: 'Admin Dashboard - Dzaleka Online Services',
  description: 'Manage and monitor Dzaleka Online Services. Access analytics, content management, and service monitoring tools.',
  image: '/images/20241023_205851_3.jpg',
  keywords: [
    'Dzaleka Dashboard',
    'Admin Panel',
    'Service Management',
    'Analytics',
    'Content Monitoring'
  ].filter(Boolean).join(', '),
  type: 'website'
};

---

<MainLayout title="Dashboard - Analytics">
  <!-- Load Chart.js from CDN with defer attribute -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js" defer></script>
  
  <!-- Pass data to client-side JavaScript -->
  <script is:inline define:vars={{ chartDataJSON: JSON.stringify(chartData) }}>
    // Wait for Chart.js to load
    window.addEventListener('load', function() {
      // Check if Chart is available
      if (typeof Chart === 'undefined') {
        console.error('Chart.js library not loaded. Loading it now...');
        
        // If Chart.js failed to load, try loading it again
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js';
        script.onload = initCharts;
        script.onerror = function() {
          console.error('Failed to load Chart.js library. Charts will not be displayed.');
          document.querySelectorAll('.chart-container').forEach(container => {
            container.innerHTML = '<div class="flex items-center justify-center h-full"><p class="text-gray-500">Chart could not be loaded</p></div>';
          });
        };
        document.head.appendChild(script);
      } else {
        // Chart.js is already loaded, initialize charts
        initCharts();
      }
    });

    // Function to initialize all charts
    function initCharts() {
      try {
        // Parse the stringified data
        const chartData = JSON.parse(chartDataJSON);
        
        // Define colors for consistent styling
        const colors = [
          '#3B82F6', // blue
          '#10B981', // green
          '#F59E0B', // amber
          '#EF4444', // red
          '#8B5CF6', // purple
          '#EC4899', // pink
          '#6366F1'  // indigo
        ];
        
        // Helper to create charts
        function createChart(elementId, type, chartData, options = {}) {
          const canvas = document.getElementById(elementId);
          if (!canvas) {
            console.error(`Canvas element with id ${elementId} not found`);
            return;
          }
          
          const ctx = canvas.getContext('2d');
          
          // Default options based on chart type
          const defaultOptions = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: true,
                position: type === 'bar' ? 'top' : 'bottom',
                labels: {
                  font: {
                    size: 12
                  }
                }
              },
              tooltip: {
                enabled: true
              }
            }
          };
          
          // Add scales for bar charts
          if (type === 'bar') {
            defaultOptions.scales = {
              y: {
                beginAtZero: true
              }
            };
            defaultOptions.plugins.legend.display = false;
          }
          
          // Create the chart
          return new Chart(ctx, {
            type,
            data: {
              labels: chartData.labels,
              datasets: [{
                data: chartData.values,
                backgroundColor: colors.slice(0, chartData.values.length),
                borderWidth: 0
              }]
            },
            options: {
              ...defaultOptions,
              ...options
            }
          });
        }

        // Create all charts with a small delay to ensure canvas elements are ready
        setTimeout(() => {
          try {
            // Service Status Chart
            createChart(
              'serviceStatusChart',
              'doughnut',
              chartData.serviceStatus
            );

            // Recent Activity Chart
            createChart(
              'recentActivityChart',
              'bar',
              chartData.recentActivity
            );

            // Category Distribution Chart
            createChart(
              'categoryDistributionChart',
              'pie',
              chartData.categoryDistribution
            );

            // Resource Status Chart
            createChart(
              'resourceStatusChart',
              'doughnut',
              chartData.resourceStats
            );

            // Resource Categories Chart
            createChart(
              'resourceCategoriesChart',
              'bar',
              chartData.resourceCategories
            );
            
            // Skills Distribution Chart
            createChart(
              'skillsDistributionChart',
              'doughnut',
              chartData.skillsDistribution
            );
            
            // Skills Categories Chart
            createChart(
              'skillsCategoriesChart',
              'bar',
              chartData.skillsCategories
            );
            
            // Jobs Status Chart
            createChart(
              'jobsStatusChart',
              'doughnut',
              chartData.jobsStatus
            );
            
            console.log('All charts initialized successfully');
          } catch (error) {
            console.error('Error initializing charts:', error);
          }
        }, 300); // Increased delay to ensure DOM is fully ready
      } catch (error) {
        console.error('Error in chart initialization:', error);
      }
    }
  </script>

  <main class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 py-12">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Dashboard</h1>
        <p class="mt-2 text-gray-600">Overview of platform statistics and analytics</p>
      </div>

      <!-- Service Statistics -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Service Statistics</h2>
        <p class="text-gray-600 mb-4">Key metrics about services registered on the platform. These cards provide a quick overview of service status and categories.</p>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- Total Services -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Services</p>
              <p class="text-2xl font-bold text-gray-900 mt-1">{serviceStats.total}</p>
            </div>
            <div class="p-3 bg-primary-50 rounded-lg">
              <svg class="w-6 h-6 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
          </div>
          <div class="mt-4">
            <div class="flex items-center">
              <span class="text-sm text-gray-500">Active services: {serviceStats.active}</span>
            </div>
          </div>
        </div>

        <!-- Verified Services -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Verified Services</p>
              <p class="text-2xl font-bold text-gray-900 mt-1">{serviceStats.verified}</p>
            </div>
            <div class="p-3 bg-green-50 rounded-lg">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
          <div class="mt-4">
            <div class="flex items-center">
              <span class="text-sm text-gray-500">
                {Math.round((serviceStats.verified / serviceStats.total) * 100)}% of total services
              </span>
            </div>
          </div>
        </div>

        <!-- Service Categories -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Categories</p>
              <p class="text-2xl font-bold text-gray-900 mt-1">{serviceStats.categories}</p>
            </div>
            <div class="p-3 bg-blue-50 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
            </div>
          </div>
          <div class="mt-4">
            <div class="flex items-center">
              <span class="text-sm text-gray-500">Avg. {Math.round(serviceStats.total / serviceStats.categories)} services per category</span>
            </div>
          </div>
        </div>

        <!-- Recent Activity -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Recent Updates</p>
              <p class="text-2xl font-bold text-gray-900 mt-1">{recentServices}</p>
            </div>
            <div class="p-3 bg-yellow-50 rounded-lg">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
          <div class="mt-4">
            <div class="flex items-center">
              <span class="text-sm text-gray-500">In the last 30 days</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Quick Actions</h3>
        <p class="text-sm text-gray-600 mb-4">Common tasks and shortcuts to help you navigate the platform efficiently. Click on any card to access the corresponding section.</p>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <a 
            href="/services/register" 
            class="flex items-center p-4 bg-primary-50 rounded-lg hover:bg-primary-100 transition-colors"
          >
            <div class="p-2 bg-primary-100 rounded-lg mr-4">
              <svg class="w-6 h-6 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </div>
            <div>
              <h4 class="text-sm font-medium text-primary-900">Add Service</h4>
              <p class="text-xs text-primary-700 mt-1">Register a new service</p>
            </div>
          </a>

          <a 
            href="/services" 
            class="flex items-center p-4 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
          >
            <div class="p-2 bg-blue-100 rounded-lg mr-4">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <div>
              <h4 class="text-sm font-medium text-blue-900">View Services</h4>
              <p class="text-xs text-blue-700 mt-1">Browse all services</p>
            </div>
          </a>

          <a 
            href="/skills-exchange" 
            class="flex items-center p-4 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors"
          >
            <div class="p-2 bg-purple-100 rounded-lg mr-4">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
              </svg>
            </div>
            <div>
              <h4 class="text-sm font-medium text-purple-900">Skills Exchange</h4>
              <p class="text-xs text-purple-700 mt-1">Offer or request skills</p>
            </div>
          </a>

          <a 
            href="/analytics" 
            class="flex items-center p-4 bg-green-50 rounded-lg hover:bg-green-100 transition-colors"
          >
            <div class="p-2 bg-green-100 rounded-lg mr-4">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2m0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <div>
              <h4 class="text-sm font-medium text-green-900">Detailed Analytics</h4>
              <p class="text-xs text-green-700 mt-1">View full statistics</p>
            </div>
          </a>

          <a 
            href="/services/update-request" 
            class="flex items-center p-4 bg-yellow-50 rounded-lg hover:bg-yellow-100 transition-colors"
          >
            <div class="p-2 bg-yellow-100 rounded-lg mr-4">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
            </div>
            <div>
              <h4 class="text-sm font-medium text-yellow-900">Update Requests</h4>
              <p class="text-xs text-yellow-700 mt-1">View pending updates</p>
            </div>
          </a>
        </div>
      </div>

      <!-- Category Distribution -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Category Analysis</h2>
        <p class="text-gray-600 mb-4">Breakdown of service categories and their distribution. This section shows the most popular categories and their relative proportions.</p>
      </div>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Top Categories -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Top Service Categories</h3>
          <div class="space-y-4">
            {sortedCategories.map(([category, count]) => (
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <span class="text-sm font-medium text-gray-900">{category}</span>
                </div>
                <div class="flex items-center">
                  <span class="text-sm font-semibold text-gray-900">{count}</span>
                  <span class="ml-2 text-xs text-gray-500">
                    ({Math.round((count / serviceStats.total) * 100)}%)
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Charts Section -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Visual Analytics</h2>
        <p class="text-gray-600 mb-4">Interactive charts providing visual insights into platform data. These visualizations help identify trends and patterns at a glance.</p>
      </div>
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <!-- Service Status Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Service Status Distribution</h3>
          <div class="h-64 chart-container">
            <canvas id="serviceStatusChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Shows the proportion of active vs. inactive services in the platform.</p>
        </div>

        <!-- Recent Activity Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Recent Activity Overview</h3>
          <div class="h-64 chart-container">
            <canvas id="recentActivityChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Displays recent updates across different content types in the last 30 days.</p>
        </div>

        <!-- Category Distribution Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Category Distribution</h3>
          <div class="h-64 chart-container">
            <canvas id="categoryDistributionChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Illustrates how services are distributed across different categories.</p>
        </div>
      </div>

      <!-- Resource Charts Section -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Resource Analytics</h2>
        <p class="text-gray-600 mb-4">Analysis of resource usage and distribution across categories. These charts help understand how resources are being utilized on the platform.</p>
      </div>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Resource Status Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Resource Activity Distribution</h3>
          <div class="h-64 chart-container">
            <canvas id="resourceStatusChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Compares recently added resources to older resources in the platform.</p>
        </div>

        <!-- Resource Categories Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Top Resource Categories</h3>
          <div class="h-64 chart-container">
            <canvas id="resourceCategoriesChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Shows the most popular resource categories by number of items.</p>
        </div>
      </div>

      <!-- Skills Exchange Charts Section -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Skills Exchange Analytics</h2>
        <p class="text-gray-600 mb-4">Insights into the Skills Exchange marketplace, showing the balance between skills offered and requested, and popular skill categories.</p>
      </div>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Skills Distribution Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Skills Exchange Distribution</h3>
            <a href="/skills-exchange" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
          </div>
          <div class="h-64 chart-container">
            <canvas id="skillsDistributionChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Compares the number of skills being offered versus skills being requested.</p>
          <div class="mt-4 pt-4 border-t border-gray-100">
            <div class="grid grid-cols-2 gap-4">
              <a href="/skills-exchange/skills-offered" class="flex flex-col items-center p-3 bg-green-50 rounded-lg hover:bg-green-100 transition-colors">
                <span class="text-sm font-medium text-green-800">Skills Offered</span>
                <span class="text-lg font-bold text-green-900">{stats.skills.offered}</span>
              </a>
              <a href="/skills-exchange/skills-requested" class="flex flex-col items-center p-3 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
                <span class="text-sm font-medium text-blue-800">Skills Requested</span>
                <span class="text-lg font-bold text-blue-900">{stats.skills.requested}</span>
              </a>
            </div>
          </div>
        </div>

        <!-- Skills Categories Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Top Skill Categories</h3>
            <a href="/skills-exchange" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
          </div>
          <div class="h-64 chart-container">
            <canvas id="skillsCategoriesChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Displays the most common skill categories in the Skills Exchange.</p>
          <div class="mt-4 pt-4 border-t border-gray-100">
            <div class="space-y-2">
              {sortedSkillCategories.map(([category, count]) => (
                <div class="flex items-center justify-between">
                  <a href={`/skills-exchange?category=${category}`} class="text-sm font-medium text-gray-900 hover:text-primary-600 transition-colors">
                    {category}
                  </a>
                  <div class="flex items-center">
                    <span class="text-sm font-semibold text-gray-900">{count}</span>
                    <span class="ml-2 text-xs text-gray-500">
                      ({Math.round((count / stats.skills.total) * 100)}%)
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <!-- Jobs Analytics Section -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Jobs Analytics</h2>
        <p class="text-gray-600 mb-4">Overview of job listings and employment opportunities on the platform. This section shows active job postings and recent activity.</p>
      </div>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Jobs Status Chart -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Jobs Status Distribution</h3>
            <a href="/jobs" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
          </div>
          <div class="h-64 chart-container">
            <canvas id="jobsStatusChart"></canvas>
          </div>
          <p class="mt-4 text-sm text-gray-600 text-center">Shows the proportion of active vs. inactive job listings on the platform.</p>
          <div class="mt-4 pt-4 border-t border-gray-100">
            <div class="grid grid-cols-2 gap-4">
              <div class="flex flex-col items-center p-3 bg-green-50 rounded-lg">
                <span class="text-sm font-medium text-green-800">Active Jobs</span>
                <span class="text-lg font-bold text-green-900">{stats.jobs.active}</span>
              </div>
              <div class="flex flex-col items-center p-3 bg-gray-50 rounded-lg">
                <span class="text-sm font-medium text-gray-800">Total Jobs</span>
                <span class="text-lg font-bold text-gray-900">{stats.jobs.total}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Jobs Activity -->
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Recent Job Activity</h3>
            <a href="/jobs" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
          </div>
          <div class="space-y-4">
            {jobs
              .sort((a, b) => new Date(b.data.date) - new Date(a.data.date))
              .slice(0, 5)
              .map(job => (
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer" onclick={`window.location.href='/jobs/${job.id.replace('.md', '')}'`}>
                  <div>
                    <div class="text-sm font-medium text-gray-900">{job.data.title}</div>
                    <div class="text-xs text-gray-500">{job.data.company || job.data.organization || 'No company specified'}</div>
                  </div>
                  <div class="flex items-center">
                    <span class={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      job.data.status === 'active' 
                        ? 'bg-green-100 text-green-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {job.data.status || 'Inactive'}
                    </span>
                  </div>
                </div>
              ))
            }
            {jobs.length === 0 && (
              <div class="text-center py-4 text-gray-500">
                No job listings available
              </div>
            )}
          </div>
          <div class="mt-4 pt-4 border-t border-gray-100">
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600">Recent job postings</span>
              <span class="text-sm font-semibold text-gray-900">{stats.jobs.recent} in the last 30 days</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Recent Activity Tables -->
      <div class="mb-2">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Recent Activity</h2>
        <p class="text-gray-600 mb-4">Latest updates and activities across the platform. These tables show the most recent changes to services and skills exchange listings.</p>
      </div>
      
      <!-- Recent Activity Table -->
      <div class="bg-white rounded-xl shadow-sm overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
          <div>
            <h3 class="text-lg font-semibold text-gray-900">Recent Service Activity</h3>
            <p class="text-sm text-gray-600 mt-1">The most recently updated services on the platform. Click on any row to view details.</p>
          </div>
          <a href="/services" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all services</a>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Updated</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {services
                .filter(service => service.data.lastUpdated)
                .sort((a, b) => new Date(b.data.lastUpdated) - new Date(a.data.lastUpdated))
                .slice(0, 5)
                .map(service => (
                  <tr class="hover:bg-gray-50 cursor-pointer transition-colors" onclick={`window.location.href='/services/${service.id.replace('.md', '')}'`}>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        <div class="flex-shrink-0 h-10 w-10">
                          <img 
                            class="h-10 w-10 rounded-lg object-cover" 
                            src={service.data.logo || '/images/logos/default-service.svg'} 
                            alt={service.data.title} 
                          />
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900">{service.data.title}</div>
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900">{service.data.category}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        service.data.status === 'active' 
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {service.data.status || 'Inactive'}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(service.data.lastUpdated).toLocaleDateString()}
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
      </div>

      <!-- Skills Exchange Activity -->
      <div class="bg-white rounded-xl shadow-sm overflow-hidden mt-8">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
          <div>
            <h3 class="text-lg font-semibold text-gray-900">Recent Skills Exchange Activity</h3>
            <p class="text-sm text-gray-600 mt-1">Latest skills being offered or requested in the Skills Exchange. Click on any row to view profile details.</p>
          </div>
          <a href="/skills-exchange" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all skills</a>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Skill</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Charge</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {profiles
                .filter(profile => profile.data.status === 'Available' || profile.data.status === 'Requested')
                .slice(0, 5)
                .map(profile => (
                  <tr class="hover:bg-gray-50 cursor-pointer transition-colors" onclick={`window.location.href='/skills-exchange/profile/${profile.id.replace('.md', '')}'`}>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        <div class="flex-shrink-0 h-10 w-10">
                          <img 
                            class="h-10 w-10 rounded-full object-cover" 
                            src={profile.data.profileImage || '/images/avatars/default-avatar.png'} 
                            alt={profile.data.name} 
                          />
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900">{profile.data.name}</div>
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900">{profile.data.skill}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900">{profile.data.category || 'Uncategorized'}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900">{profile.data.level || 'Not specified'}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        profile.data.chargeType === 'free' 
                          ? 'bg-green-100 text-green-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {profile.data.chargeType === 'free' ? 'Free' : profile.data.rate ? profile.data.rate : 'Paid'}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        profile.data.status === 'Available' 
                          ? 'bg-green-100 text-green-800'
                          : 'bg-blue-100 text-blue-800'
                      }`}>
                        {profile.data.status}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {profile.data.location}
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
      </div> <br>

      <!-- System Monitoring & Tools -->
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">System Monitoring & Tools</h2>
        <p class="text-gray-600 mb-6">Monitor platform health, manage notifications, and access administrative tools.</p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Content Health Monitor -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Content Health Monitor</h3>
              <button id="refresh-content-health" class="text-primary-600 hover:text-primary-700 text-sm font-medium flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </button>
            </div>
            <div class="space-y-4">
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                  <span class="text-sm text-gray-700">Healthy Content</span>
                </div>
                <span class="text-sm font-medium">{healthPercentage}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div class="bg-green-500 h-2.5 rounded-full" style={`width: ${healthPercentage}%`}></div>
              </div>
              
              <div class="mt-4 space-y-3">
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-600">Missing Images</span>
                  <span class="text-sm font-medium text-amber-600">{contentHealth.missingImages} items</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-600">Incomplete Metadata</span>
                  <span class="text-sm font-medium text-amber-600">{contentHealth.incompleteMetadata} items</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-600">Broken Links</span>
                  <span class="text-sm font-medium text-red-600">{contentHealth.brokenLinks} items</span>
                </div>
              </div>
              
              <button id="view-content-issues" class="mt-4 w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                View Content Issues
              </button>
            </div>
          </div>
          
          <!-- API Monitor -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">API Monitor</h3>
              <button id="check-api-status" class="text-primary-600 hover:text-primary-700 text-sm font-medium flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Check Now
              </button>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center">
                <div id="overall-status-indicator" class="w-3 h-3 rounded-full bg-gray-300 mr-2"></div>
                <span id="overall-status" class="text-sm font-medium text-gray-900">Checking System Status...</span>
              </div>
              
              <div class="bg-gray-50 rounded-lg p-4">
                <div id="api-status-list" class="space-y-3">
                  {initialApiHealth.map(api => (
                    <div class="flex justify-between items-center">
                      <div class="flex items-center space-x-2">
                        <span class="text-sm text-gray-600">{api.name}</span>
                        <span class="text-xs text-gray-500">{api.latency}</span>
                      </div>
                      <span class="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800">{api.status}</span>
                    </div>
                  ))}
                </div>
              </div>
              
              <div class="text-xs text-gray-500 mt-2" id="last-checked">
                Last checked: Never
              </div>
              
              <a href="/api-test" class="mt-2 w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                View Detailed API Status
              </a>
            </div>
          </div>
          
          <!-- Notification Center -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Notification Center</h3>
              <button id="mark-all-read" class="text-primary-600 hover:text-primary-700 text-sm font-medium">
                Mark All Read
              </button>
            </div>
            
            <div class="space-y-4 max-h-80 overflow-y-auto">
              {updates.slice(0, 4).map((update, index) => {
                // Determine background and icon based on update type
                let bgColor = 'bg-gray-50';
                let iconColor = 'text-gray-600';
                let dotColor = '';
                let icon = '';
                
                if (update.type === 'feature') {
                  bgColor = 'bg-blue-50';
                  iconColor = 'text-blue-600';
                  dotColor = 'bg-blue-500';
                  icon = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />`;
                } else if (update.type === 'improvement' || update.type === 'update') {
                  bgColor = 'bg-green-50';
                  iconColor = 'text-green-600';
                  dotColor = 'bg-green-500';
                  icon = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />`;
                } else if (update.type === 'data') {
                  bgColor = 'bg-yellow-50';
                  iconColor = 'text-yellow-600';
                  dotColor = 'bg-yellow-500';
                  icon = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />`;
                } else if (update.type === 'announcement') {
                  bgColor = 'bg-purple-50';
                  iconColor = 'text-purple-600';
                  dotColor = 'bg-purple-500';
                  icon = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z" />`;
                }
                
                // Calculate relative time
                const updateDate = new Date(update.date);
                const now = new Date();
                const diffTime = Math.abs(now - updateDate);
                const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
                
                let timeAgo = '';
                if (diffDays === 0) {
                  const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
                  if (diffHours === 0) {
                    const diffMinutes = Math.floor(diffTime / (1000 * 60));
                    timeAgo = `${diffMinutes} minutes ago`;
                  } else {
                    timeAgo = `${diffHours} hours ago`;
                  }
                } else if (diffDays === 1) {
                  timeAgo = 'Yesterday';
                } else {
                  timeAgo = `${diffDays} days ago`;
                }
                
                // Show unread indicator for first 3 items
                const showUnread = index < 3;
                
                return (
                  <div class={`p-3 ${bgColor} rounded-lg relative`}>
                    {showUnread && <div class={`absolute top-3 right-3 w-2 h-2 rounded-full ${dotColor}`}></div>}
                    <div class="flex items-start space-x-3">
                      <div class={`flex-shrink-0 ${iconColor}`}>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          {icon}
                        </svg>
                      </div>
                      <div>
                        <h4 class="text-sm font-medium text-gray-900">{update.title}</h4>
                        <p class="text-xs text-gray-600 mt-1">{update.text.split('\n')[0]}</p>
                        <div class="flex justify-between items-center mt-2">
                          <span class="text-xs text-gray-500">{timeAgo}</span>
                          {'link' in update ? (
                            <a href={update.link} class="text-xs text-blue-600 hover:text-blue-800">{update.linkText}</a>
                          ) : (
                            <button class="text-xs text-blue-600 hover:text-blue-800">View</button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            
            <div class="mt-4 pt-4 border-t border-gray-100 flex justify-between">
              <span class="text-xs text-gray-500">3 unread notifications</span>
              <a href="/updates" class="text-xs text-primary-600 hover:text-primary-700">View All Updates</a>
            </div>
          </div>
          
          <!-- Skill Exchange Match System -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Skill Exchange Matching</h3>
              <button id="refresh-matches" class="text-primary-600 hover:text-primary-700 text-sm font-medium flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </button>
            </div>
            
            <div class="space-y-4">
              {/* Calculate potential matches by category */}
              {(() => {
                // Group skills by category
                const skillsByCategory = {};
                
                // Count offers by category
                skillsOffered.forEach(profile => {
                  const category = profile.data.category || 'Uncategorized';
                  if (!skillsByCategory[category]) {
                    skillsByCategory[category] = { offers: 0, requests: 0 };
                  }
                  skillsByCategory[category].offers++;
                });
                
                // Count requests by category
                skillsRequested.forEach(profile => {
                  const category = profile.data.category || 'Uncategorized';
                  if (!skillsByCategory[category]) {
                    skillsByCategory[category] = { offers: 0, requests: 0 };
                  }
                  skillsByCategory[category].requests++;
                });
                
                // Filter categories with both offers and requests (potential matches)
                const matchCategories = Object.entries(skillsByCategory)
                  .filter(([_, counts]) => counts.offers > 0 && counts.requests > 0)
                  .sort((a, b) => {
                    // Sort by total potential matches (min of offers and requests)
                    const potentialMatchesA = Math.min(a[1].offers, a[1].requests);
                    const potentialMatchesB = Math.min(b[1].offers, b[1].requests);
                    return potentialMatchesB - potentialMatchesA;
                  })
                  .slice(0, 3); // Take top 3 categories
                
                // Calculate total potential matches
                const totalPotentialMatches = matchCategories.reduce((sum, [_, counts]) => {
                  return sum + Math.min(counts.offers, counts.requests);
                }, 0);
                
                return (
                  <>
                    <div class="flex justify-between items-center">
                      <span class="text-sm text-gray-600">Potential Matches</span>
                      <span class="text-sm font-medium">{totalPotentialMatches} matches</span>
                    </div>
                    
                    <div class="bg-gray-50 rounded-lg p-4 space-y-3">
                      {matchCategories.length > 0 ? (
                        matchCategories.map(([category, counts]) => (
                          <div class="flex justify-between items-center">
                            <div>
                              <div class="text-sm font-medium text-gray-900">{category}</div>
                              <div class="text-xs text-gray-500">{counts.offers} offers • {counts.requests} requests</div>
                            </div>
                            <button class="text-xs text-blue-600 hover:text-blue-800">Match</button>
                          </div>
                        ))
                      ) : (
                        <div class="text-sm text-gray-500 text-center py-2">No potential matches found</div>
                      )}
                    </div>
                  </>
                );
              })()}
              
              <div class="mt-4">
                <button id="run-matching-algorithm" class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                  Run Matching Algorithm
                </button>
              </div>
              
              <div class="mt-2">
                <a href="/skills-exchange/matches" class="w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                  View All Potential Matches
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Export Data Section -->
      <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
        <h2 class="text-xl font-bold text-gray-900 mb-4">Export Data</h2>
        <p class="text-gray-600 mb-6">
          Download platform data for analysis and reporting. Select the data types you want to export, 
          choose a format, and set optional filters. Exports can be used for offline analysis, 
          reporting, or data backup. Click on any row in the Recent Exports table to download again.
        </p>
        
        <!-- API Test Link -->
        <div class="mb-6 p-3 bg-blue-50 rounded-lg flex items-center justify-between">
          <div>
            <span class="text-sm font-medium text-blue-800">Having trouble with exports?</span>
            <span class="ml-2 text-sm text-blue-700">Check the API status or use our test dashboard.</span>
          </div>
          <a href="/test-api" class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            <svg class="mr-1.5 -ml-0.5 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
            API Test Dashboard
          </a>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Export Options -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Select Data to Export</h3>
            <div class="space-y-3">
              <div class="flex items-center">
                <input type="checkbox" id="export-services" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" checked>
                <label for="export-services" class="ml-2 block text-sm text-gray-700">Services</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/services</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-resources" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" checked>
                <label for="export-resources" class="ml-2 block text-sm text-gray-700">Resources</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/resources</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-events" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300">
                <label for="export-events" class="ml-2 block text-sm text-gray-700">Events</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/events</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-photos" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-photos" class="ml-2 block text-sm text-gray-700">Photos</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/photos</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-profiles" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-profiles" class="ml-2 block text-sm text-gray-700">Skills Exchange Profiles</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/profiles</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-talents" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-talents" class="ml-2 block text-sm text-gray-700">Talents</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/talents</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-voices" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-voices" class="ml-2 block text-sm text-gray-700">Community Voices</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/community-voices</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-news" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-news" class="ml-2 block text-sm text-gray-700">News</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/news</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-jobs" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-jobs" class="ml-2 block text-sm text-gray-700">Jobs</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/jobs</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-docs" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-docs" class="ml-2 block text-sm text-gray-700">Documentation</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/docs</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-pages" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-pages" class="ml-2 block text-sm text-gray-700">Pages</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/pages</span>
              </div>
              <div class="flex items-center">
                <input type="checkbox" id="export-all" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                <label for="export-all" class="ml-2 block text-sm text-gray-700">All Data</label>
                <span class="ml-2 text-xs text-gray-500 endpoint-url">/api/export</span>
              </div>
            </div>
            
            <div class="mt-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Date Range</h3>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="start-date" class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                  <input type="date" id="start-date" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md">
                </div>
                <div>
                  <label for="end-date" class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                  <input type="date" id="end-date" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md">
                </div>
              </div>
            </div>
          </div>
          
          <!-- Export Format -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Export Format</h3>
            <div class="space-y-4">
              <div class="flex items-center">
                <input type="radio" id="format-csv" name="export-format" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300" checked>
                <label for="format-csv" class="ml-2 block text-sm text-gray-700">CSV Format</label>
                <span class="ml-2 text-xs text-gray-500">(Compatible with Excel, Google Sheets)</span>
              </div>
              <div class="flex items-center">
                <input type="radio" id="format-json" name="export-format" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300">
                <label for="format-json" class="ml-2 block text-sm text-gray-700">JSON Format</label>
                <span class="ml-2 text-xs text-gray-500">(For developers, data analysis)</span>
              </div>
              
              <div class="mt-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Export Options</h3>
                <div class="space-y-3">
                  <div class="flex items-center">
                    <input type="checkbox" id="include-metadata" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" checked>
                    <label for="include-metadata" class="ml-2 block text-sm text-gray-700">Include Metadata</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="include-stats" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" checked>
                    <label for="include-stats" class="ml-2 block text-sm text-gray-700">Include Statistics</label>
                  </div>
                </div>
              </div>
              
              <div class="mt-6">
                <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
                  <h4 class="text-sm font-medium text-gray-700 mb-2">API Endpoint</h4>
                  <div class="flex">
                    <input type="text" id="api-endpoint-display" class="text-xs text-gray-600 bg-white p-2 border border-gray-300 rounded-l-md w-full font-mono" readonly value="/api/export">
                    <button id="copy-endpoint" class="bg-gray-100 hover:bg-gray-200 text-gray-700 text-xs font-medium py-2 px-3 rounded-r-md border border-l-0 border-gray-300">
                      Copy
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="mt-8">
                <button type="button" id="export-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                  <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                  </svg>
                  Export Data
                </button>
                <div id="export-status" class="mt-2 text-sm hidden"></div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Recent Exports Table -->
        <div class="mt-8">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Recent Exports</h3>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Collections</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Format</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200" id="recent-exports-table">
                <!-- Recent exports will be populated here -->
                <tr class="hover:bg-gray-50 cursor-pointer">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">2023-03-08 09:45</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Services, Resources</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">CSV</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">245 KB</td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Completed</span>
                  </td>
                </tr>
                <tr class="hover:bg-gray-50 cursor-pointer">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">2023-03-07 14:22</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">All Collections</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">JSON</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">1.2 MB</td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Completed</span>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Platform Statistics -->
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Platform Overview</h2>
        <p class="text-gray-600 mb-6">A comprehensive view of all content types across the platform. Each card shows key metrics and provides quick access to the full section.</p>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          
          <!-- Resources Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Resources</h3>
              <a href="/resources" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Resources</span>
                <span class="font-semibold">{stats.resources.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.resources.categories}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Recent Uploads</span>
                <span class="font-semibold">{stats.resources.recent}</span>
              </div>
            </div>
          </div>

          <!-- Events Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Events</h3>
              <a href="/events" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Events</span>
                <span class="font-semibold">{stats.events.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Upcoming Events</span>
                <span class="font-semibold">{stats.events.upcoming}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.events.categories}</span>
              </div>
            </div>
          </div>

          <!-- Photos Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Photo Gallery</h3>
              <a href="/gallery" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Photos</span>
                <span class="font-semibold">{stats.photos.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Albums</span>
                <span class="font-semibold">{stats.photos.albums}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Recent Uploads</span>
                <span class="font-semibold">{stats.photos.recent}</span>
              </div>
            </div>
          </div>

          <!-- Skills Exchange Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Skills Exchange</h3>
              <a href="/skills-exchange" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Skills</span>
                <span class="font-semibold">{stats.skills.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.skills.categories}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Recent Skills</span>
                <span class="font-semibold">{stats.skills.recent}</span>
              </div>
            </div>
          </div>

          <!-- Community Voices Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Community Voices</h3>
              <a href="/community-voices" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Stories</span>
                <span class="font-semibold">{stats.communityVoices.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.communityVoices.categories}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Recent Submissions</span>
                <span class="font-semibold">{stats.communityVoices.recent}</span>
              </div>
            </div>
          </div>

          <!-- Profiles Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Profiles</h3>
              <a href="/profiles" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Profiles</span>
                <span class="font-semibold">{stats.profiles.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Active Profiles</span>
                <span class="font-semibold">{stats.profiles.active || Math.floor(profiles.length * 0.8)}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">New This Month</span>
                <span class="font-semibold">{stats.profiles.recent}</span>
              </div>
            </div>
          </div>

          <!-- News Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">News</h3>
              <a href="/news" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Articles</span>
                <span class="font-semibold">{stats.news.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.news.categories}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Published This Month</span>
                <span class="font-semibold">{stats.news.recent}</span>
              </div>
            </div>
          </div>

          <!-- Documentation Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Documentation</h3>
              <a href="/docs" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Documents</span>
                <span class="font-semibold">{stats.docs.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.docs.categories}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Recently Updated</span>
                <span class="font-semibold">{stats.docs.recent}</span>
              </div>
            </div>
          </div>

          <!-- Jobs Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Jobs</h3>
              <a href="/jobs" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Listings</span>
                <span class="font-semibold">{stats.jobs.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Active Listings</span>
                <span class="font-semibold">{stats.jobs.active}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">New This Week</span>
                <span class="font-semibold">{stats.jobs.recent}</span>
              </div>
            </div>
          </div>

          <!-- Talents Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Talents</h3>
              <a href="/talents" class="text-primary-600 hover:text-primary-700 text-sm font-medium">View all</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Talents</span>
                <span class="font-semibold">{stats.talents.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Categories</span>
                <span class="font-semibold">{stats.talents.categories}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Featured Talents</span>
                <span class="font-semibold">{stats.talents.featured}</span>
              </div>
            </div>
          </div>

          <!-- Pages Card -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">Pages</h3>
              <a href="/admin/pages" class="text-primary-600 hover:text-primary-700 text-sm font-medium">Manage</a>
            </div>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Total Pages</span>
                <span class="font-semibold">{stats.pages.total}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Published</span>
                <span class="font-semibold">{stats.pages.published}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Draft</span>
                <span class="font-semibold">{stats.pages.draft}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</MainLayout> 

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Skill Exchange Match System functionality
    const refreshMatchesBtn = document.getElementById('refresh-matches');
    const runMatchingAlgorithmBtn = document.getElementById('run-matching-algorithm');
    
    if (refreshMatchesBtn) {
      refreshMatchesBtn.addEventListener('click', function() {
        // Show loading state
        this.innerHTML = `
          <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Refreshing...
        `;
        
        // Simulate API call with timeout
        setTimeout(() => {
          // Reload the page to refresh the data
          window.location.reload();
        }, 1500);
      });
    }
    
    if (runMatchingAlgorithmBtn) {
      runMatchingAlgorithmBtn.addEventListener('click', function() {
        // Show loading state
        this.textContent = 'Processing...';
        this.disabled = true;
        
        // Simulate API call with timeout
        setTimeout(() => {
          // Reset button
          this.textContent = 'Run Matching Algorithm';
          this.disabled = false;
          
          // Update match count with a random number for demonstration
          const matchCountElement = this.closest('.bg-white').querySelector('.text-sm.font-medium');
          if (matchCountElement) {
            const currentCount = parseInt(matchCountElement.textContent.split(' ')[0]);
            const newMatches = Math.floor(Math.random() * 3) + 1; // 1-3 new matches
            const newCount = currentCount + newMatches;
            matchCountElement.textContent = `${newCount} matches`;
          }
          
          // Show notification
          const notificationContainer = document.getElementById('notification-container');
          if (!notificationContainer) {
            const container = document.createElement('div');
            container.id = 'notification-container';
            container.className = 'fixed bottom-4 right-4 z-50 flex flex-col space-y-2';
            document.body.appendChild(container);
          }
          
          const notification = document.createElement('div');
          notification.className = 'bg-green-500 text-white px-4 py-3 rounded-lg shadow-lg max-w-md transform transition-all duration-300 ease-in-out translate-x-0';
          notification.innerHTML = `
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium">Matching algorithm completed successfully. Found ${newMatches} new potential matches.</p>
              </div>
              <button class="ml-4 text-white opacity-75 hover:opacity-100 focus:outline-none">
                <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          `;
          
          document.getElementById('notification-container').appendChild(notification);
          
          // Add click event to close button
          const closeButton = notification.querySelector('button');
          closeButton.addEventListener('click', () => {
            notification.classList.add('opacity-0', 'translate-x-full');
            setTimeout(() => {
              notification.remove();
            }, 300);
          });
          
          // Auto remove after 5 seconds
          setTimeout(() => {
            if (notification.parentNode) {
              notification.classList.add('opacity-0', 'translate-x-full');
              setTimeout(() => {
                if (notification.parentNode) {
                  notification.remove();
                }
              }, 300);
            }
          }, 5000);
        }, 2500);
      });
    }
    
    // Add click handlers to match buttons
    document.querySelectorAll('.bg-gray-50.rounded-lg.p-4.space-y-3 button').forEach(btn => {
      btn.addEventListener('click', function() {
        const categoryName = this.closest('.flex.justify-between.items-center').querySelector('.text-sm.font-medium.text-gray-900').textContent;
        
        // Show loading state
        const originalText = this.textContent;
        this.textContent = '...';
        this.disabled = true;
        
        // Simulate API call with timeout
        setTimeout(() => {
          // Reset button
          this.textContent = originalText;
          this.disabled = false;
          
          // Show notification
          const notificationContainer = document.getElementById('notification-container');
          if (!notificationContainer) {
            const container = document.createElement('div');
            container.id = 'notification-container';
            container.className = 'fixed bottom-4 right-4 z-50 flex flex-col space-y-2';
            document.body.appendChild(container);
          }
          
          const notification = document.createElement('div');
          notification.className = 'bg-blue-500 text-white px-4 py-3 rounded-lg shadow-lg max-w-md transform transition-all duration-300 ease-in-out translate-x-0';
          notification.innerHTML = `
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium">Matching initiated for ${categoryName}. View potential matches in the Skills Exchange section.</p>
              </div>
              <button class="ml-4 text-white opacity-75 hover:opacity-100 focus:outline-none">
                <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          `;
          
          document.getElementById('notification-container').appendChild(notification);
          
          // Add click event to close button
          const closeButton = notification.querySelector('button');
          closeButton.addEventListener('click', () => {
            notification.classList.add('opacity-0', 'translate-x-full');
            setTimeout(() => {
              notification.remove();
            }, 300);
          });
          
          // Auto remove after 5 seconds
          setTimeout(() => {
            if (notification.parentNode) {
              notification.classList.add('opacity-0', 'translate-x-full');
              setTimeout(() => {
                if (notification.parentNode) {
                  notification.remove();
                }
              }, 300);
            }
          }, 5000);
        }, 1500);
      });
    });
  });

  // Export Data functionality
  document.addEventListener('DOMContentLoaded', function() {
    const exportButton = document.getElementById('export-button');
    const apiEndpointDisplay = document.getElementById('api-endpoint-display');
    const copyEndpointButton = document.getElementById('copy-endpoint');
    const exportStatus = document.getElementById('export-status');
    
    // Determine base URL - specifically optimized for Netlify
    const getBaseUrl = () => {
      // Always use the current window location as the base URL
      // This ensures we're using the same domain the site is hosted on
      const baseUrl = `${window.location.protocol}//${window.location.host}`;
      console.log(`Using base URL: ${baseUrl}`);
      return baseUrl;
    };
    
    // Get the base URL for API requests
    const baseUrl = getBaseUrl();
    
    // Collection checkboxes
    const collectionCheckboxes = {
      services: document.getElementById('export-services'),
      resources: document.getElementById('export-resources'),
      events: document.getElementById('export-events'),
      photos: document.getElementById('export-photos'),
      profiles: document.getElementById('export-profiles'),
      talents: document.getElementById('export-talents'),
      'community-voices': document.getElementById('export-voices'),
      news: document.getElementById('export-news'),
      jobs: document.getElementById('export-jobs'),
      docs: document.getElementById('export-docs'),
      pages: document.getElementById('export-pages')
    };
    
    const exportAllCheckbox = document.getElementById('export-all');
    const formatCsvRadio = document.getElementById('format-csv');
    const formatJsonRadio = document.getElementById('format-json');
    const includeMetadataCheckbox = document.getElementById('include-metadata');
    const includeStatsCheckbox = document.getElementById('include-stats');
    
    // Update API endpoint display when selections change
    function updateApiEndpointDisplay() {
      let endpoint = '/api/';
      
      // Check if "All Data" is selected
      if (exportAllCheckbox.checked) {
        endpoint += 'export';
      } else {
        // Get selected collections
        const selectedCollections = Object.keys(collectionCheckboxes).filter(
          key => collectionCheckboxes[key].checked
        );
        
        // If only one collection is selected, use its direct endpoint
        if (selectedCollections.length === 1) {
          endpoint += selectedCollections[0];
        } else if (selectedCollections.length > 1) {
          endpoint += 'export';
        } else {
          endpoint += 'export';
        }
      }
      
      // Add base URL for production environments
      const fullEndpoint = `${baseUrl}${endpoint}`;
      apiEndpointDisplay.value = fullEndpoint;
    }
    
    // Add event listeners to all checkboxes and radio buttons
    Object.values(collectionCheckboxes).forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        // If a specific collection is checked, uncheck "All Data"
        if (this.checked && exportAllCheckbox.checked) {
          exportAllCheckbox.checked = false;
        }
        updateApiEndpointDisplay();
      });
    });
    
    exportAllCheckbox.addEventListener('change', function() {
      // If "All Data" is checked, uncheck all other collections
      if (this.checked) {
        Object.values(collectionCheckboxes).forEach(checkbox => {
          checkbox.checked = false;
        });
      }
      updateApiEndpointDisplay();
    });
    
    [formatCsvRadio, formatJsonRadio, includeMetadataCheckbox, includeStatsCheckbox].forEach(input => {
      input.addEventListener('change', updateApiEndpointDisplay);
    });
    
    // Initialize API endpoint display
    updateApiEndpointDisplay();
    
    // Copy endpoint to clipboard
    copyEndpointButton.addEventListener('click', function() {
      navigator.clipboard.writeText(apiEndpointDisplay.value).then(() => {
        const originalText = this.textContent;
        this.textContent = 'Copied!';
        this.classList.add('bg-green-100', 'text-green-800');
        
        setTimeout(() => {
          this.textContent = originalText;
          this.classList.remove('bg-green-100', 'text-green-800');
        }, 2000);
      });
    });
    
    // Handle export button click
    exportButton.addEventListener('click', function() {
      // Show loading state
      this.disabled = true;
      this.innerHTML = `
        <svg class="animate-spin -ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Exporting...
      `;
      
      // Show status
      exportStatus.textContent = 'Preparing export...';
      exportStatus.className = 'mt-2 text-sm text-blue-600';
      exportStatus.classList.remove('hidden');
      
      // Get selected collections
      let selectedCollections = [];
      if (exportAllCheckbox.checked) {
        selectedCollections = Object.keys(collectionCheckboxes);
      } else {
        selectedCollections = Object.keys(collectionCheckboxes).filter(
          key => collectionCheckboxes[key].checked
        );
      }
      
      // Get format
      const format = formatJsonRadio.checked ? 'json' : 'csv';
      
      // Get options
      const options = {
        includeMetadata: includeMetadataCheckbox.checked,
        includeStats: includeStatsCheckbox.checked
      };
      
      // Prepare request body
      const requestBody = {
        format,
        collections: selectedCollections,
        options
      };
      
      // Get API endpoint
      const endpoint = apiEndpointDisplay.value;
      
      console.log(`Making export request to: ${endpoint}`);
      console.log('Request body:', requestBody);
      
      // Make API request
      fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': format === 'csv' ? 'text/csv' : 'application/json'
        },
        body: JSON.stringify(requestBody)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        // Get the filename from the Content-Disposition header if present
        const contentDisposition = response.headers.get('Content-Disposition');
        let filename = `dzaleka-${selectedCollections.join('-')}-${new Date().toISOString().split('T')[0]}.${format}`;
        if (contentDisposition) {
          const matches = /filename="([^"]*)"/.exec(contentDisposition);
          if (matches && matches[1]) {
            filename = matches[1];
          }
        }

        // Handle different response types
        if (format === 'csv') {
          return response.blob().then(blob => ({ blob, filename }));
        } else {
          return response.json().then(data => ({ data, filename }));
        }
      })
      .then(({ data, blob, filename }) => {
        console.log('Export successful');
        
        // Reset button
        exportButton.disabled = false;
        exportButton.innerHTML = `
          <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          Export Data
        `;
        
        // Update status
        exportStatus.textContent = 'Export completed successfully!';
        exportStatus.className = 'mt-2 text-sm text-green-600';

        // Create download
        const url = blob ? URL.createObjectURL(blob) : URL.createObjectURL(new Blob([JSON.stringify(data, null, 2)]));
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        // Add to recent exports table
        const recentExportsTable = document.getElementById('recent-exports-table');
        if (recentExportsTable) {
          const newRow = document.createElement('tr');
          newRow.className = 'hover:bg-gray-50 cursor-pointer';
          newRow.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date().toLocaleString()}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${selectedCollections.join(', ')}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${format.toUpperCase()}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${blob ? formatBytes(blob.size) : 'N/A'}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Completed</span>
            </td>
          `;
          recentExportsTable.insertBefore(newRow, recentExportsTable.firstChild);
        }
      })
      .catch(error => {
        console.error('Export error:', error);
        
        // Reset button
        exportButton.disabled = false;
        exportButton.innerHTML = `
          <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          Export Data
        `;
        
        // Update status
        exportStatus.textContent = `Export failed: ${error.message}`;
        exportStatus.className = 'mt-2 text-sm text-red-600';
      });
    });
    
    // Add Netlify notice if on Netlify
    if (window.location.hostname.includes('netlify.app')) {
      const exportSection = document.querySelector('.bg-white.rounded-xl.shadow-sm.p-6.mb-8');
      if (exportSection) {
        const netlifyNotice = document.createElement('div');
        netlifyNotice.className = 'mb-6 p-3 bg-purple-50 rounded-lg';
        netlifyNotice.innerHTML = `
          <div class="flex items-start">
            <svg class="h-5 w-5 text-purple-600 mt-0.5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <span class="text-sm font-medium text-purple-800">Netlify Deployment Detected</span>
              <p class="text-sm text-purple-700 mt-1">
                API requests will be made to: <code class="bg-purple-100 px-2 py-0.5 rounded">${baseUrl}</code>
              </p>
            </div>
          </div>
        `;
        
        // Insert after the API Test Link
        const apiTestLink = exportSection.querySelector('.mb-6.p-3.bg-blue-50');
        if (apiTestLink && apiTestLink.parentNode) {
          apiTestLink.parentNode.insertBefore(netlifyNotice, apiTestLink.nextSibling);
        }
      }
    }
  });

  // Helper function to format bytes
  function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
  }

  // Function to check API health
  async function checkApiHealth() {
    const endpoints = [
      { name: 'Services API', path: '/api/services' },
      { name: 'Resources API', path: '/api/resources' },
      { name: 'Events API', path: '/api/events' },
      { name: 'Photos API', path: '/api/photos' },
      { name: 'Jobs API', path: '/api/jobs' },
      { name: 'Profiles API', path: '/api/profiles' }
    ];

    return Promise.all(endpoints.map(async endpoint => {
      const start = performance.now();
      try {
        const response = await fetch(endpoint.path);
        const latency = Math.round(performance.now() - start);
        return {
          name: endpoint.name,
          status: response.ok ? 'operational' : 'error',
          latency: `${latency}ms`
        };
      } catch (error) {
        return {
          name: endpoint.name,
          status: 'error',
          latency: 'N/A'
        };
      }
    }));
  }

  // Function to calculate system health
  function calculateSystemHealth(apiResults) {
    const operational = apiResults.filter(result => result.status === 'operational').length;
    const total = apiResults.length;
    return {
      status: operational === total ? 'All Systems Operational' : `${operational}/${total} Systems Operational`,
      isHealthy: operational === total
    };
  }

  // Add click handler for content health refresh button
  document.getElementById('refresh-content-health')?.addEventListener('click', function() {
    this.innerHTML = `
      <svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Refreshing...
    `;
    
    // Simulate refresh with timeout
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  });

  // Add click handler for API status check button
  document.getElementById('check-api-status')?.addEventListener('click', async function() {
    this.innerHTML = `
      <svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Checking...
    `;
    
    try {
      // Get API health status
      const apiResults = await checkApiHealth();
      const systemHealth = calculateSystemHealth(apiResults);
      
      // Update overall status
      const overallIndicator = document.getElementById('overall-status-indicator');
      const overallStatus = document.getElementById('overall-status');
      
      if (overallIndicator && overallStatus) {
        overallIndicator.className = `w-3 h-3 rounded-full ${systemHealth.isHealthy ? 'bg-green-500' : 'bg-red-500'} mr-2`;
        overallStatus.textContent = systemHealth.status;
      }
      
      // Update individual API statuses
      const statusList = document.getElementById('api-status-list');
      if (statusList) {
        statusList.innerHTML = apiResults.map(api => `
          <div class="flex justify-between items-center">
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-600">${api.name}</span>
              <span class="text-xs text-gray-500">${api.latency}</span>
            </div>
            <span class="px-2 py-1 text-xs font-medium rounded-full ${
              api.status === 'operational' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
            }">${api.status}</span>
          </div>
        `).join('');
      }
      
      // Update last checked time
      const lastChecked = document.getElementById('last-checked');
      if (lastChecked) {
        lastChecked.textContent = `Last checked: ${new Date().toLocaleTimeString()}`;
      }
    } catch (error) {
      console.error('Error checking API status:', error);
    }
    
    // Reset button
    this.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
      </svg>
      Check Now
    `;
  });

  // Automatically check API status on page load
  document.addEventListener('DOMContentLoaded', () => {
    const checkButton = document.getElementById('check-api-status');
    if (checkButton) {
      checkButton.click();
    }
  });
</script>

<style>
  .endpoint-url {
    font-family: monospace;
  }
</style>

<!-- Content Issues Modal -->
<div id="content-issues-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden" style="z-index: 50;">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[80vh] flex flex-col">
      <!-- Modal Header -->
      <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-gray-900">Content Issues</h3>
        <button id="close-modal" class="text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <!-- Modal Content -->
      <div class="px-6 py-4 flex-1 overflow-auto">
        <!-- Missing Images Section -->
        <div class="mb-8">
          <h4 class="text-md font-semibold text-gray-900 mb-4 flex items-center">
            <svg class="h-5 w-5 text-amber-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Missing Images ({contentHealth.missingImages} items)
          </h4>
          <div id="missing-images-list" class="space-y-2">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>

        <!-- Incomplete Metadata Section -->
        <div class="mb-8">
          <h4 class="text-md font-semibold text-gray-900 mb-4 flex items-center">
            <svg class="h-5 w-5 text-amber-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Incomplete Metadata ({contentHealth.incompleteMetadata} items)
          </h4>
          <div id="incomplete-metadata-list" class="space-y-2">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>

        <!-- Broken Links Section -->
        <div class="mb-8">
          <h4 class="text-md font-semibold text-gray-900 mb-4 flex items-center">
            <svg class="h-5 w-5 text-red-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
            Broken Links ({contentHealth.brokenLinks} items)
          </h4>
          <div id="broken-links-list" class="space-y-2">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>
      </div>
      
      <!-- Modal Footer -->
      <div class="px-6 py-4 border-t border-gray-200">
        <div class="flex justify-end">
          <button id="close-modal-btn" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">
            Close
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ contentHealthData: contentHealthData }}>
  // Get content health data from the server-side props
  const contentHealthDataObj = contentHealthData;

  // Function to format collection name for display
  function formatCollectionName(name) {
    return name.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
  }

  // Function to populate the modal with content issues
  function populateContentIssues() {
    console.log('Content Health Data:', contentHealthDataObj); // Debug log
    
    // Populate Missing Images
    const missingImagesList = document.getElementById('missing-images-list');
    if (missingImagesList) {
      let missingImagesHtml = '';
      Object.entries(contentHealthDataObj).forEach(([collection, data]) => {
        if (data.missingImages && data.missingImages.length > 0) {
          missingImagesHtml += `
            <div class="bg-amber-50 p-3 rounded-lg">
              <h5 class="font-medium text-amber-900 mb-2">${formatCollectionName(collection)}</h5>
              <ul class="list-disc list-inside space-y-1">
                ${data.missingImages.map(item => `
                  <li class="text-sm text-amber-800">
                    ${item.title} 
                    <span class="text-amber-600">(ID: ${item.id})</span>
                  </li>
                `).join('')}
              </ul>
            </div>
          `;
        }
      });
      missingImagesList.innerHTML = missingImagesHtml || '<p class="text-gray-500 text-sm">No missing images found.</p>';
    }

    // Populate Incomplete Metadata
    const incompleteMetadataList = document.getElementById('incomplete-metadata-list');
    if (incompleteMetadataList) {
      let metadataHtml = '';
      Object.entries(contentHealthDataObj).forEach(([collection, data]) => {
        if (data.incompleteMetadata && data.incompleteMetadata.length > 0) {
          metadataHtml += `
            <div class="bg-amber-50 p-3 rounded-lg">
              <h5 class="font-medium text-amber-900 mb-2">${formatCollectionName(collection)}</h5>
              <ul class="list-disc list-inside space-y-1">
                ${data.incompleteMetadata.map(item => `
                  <li class="text-sm text-amber-800">
                    ${item.title} 
                    <span class="text-amber-600">(Missing: ${item.missingFields.join(', ')})</span>
                  </li>
                `).join('')}
              </ul>
            </div>
          `;
        }
      });
      incompleteMetadataList.innerHTML = metadataHtml || '<p class="text-gray-500 text-sm">No incomplete metadata found.</p>';
    }

    // Populate Broken Links
    const brokenLinksList = document.getElementById('broken-links-list');
    if (brokenLinksList) {
      let linksHtml = '';
      Object.entries(contentHealthDataObj).forEach(([collection, data]) => {
        if (data.brokenLinks && data.brokenLinks.length > 0) {
          linksHtml += `
            <div class="bg-red-50 p-3 rounded-lg">
              <h5 class="font-medium text-red-900 mb-2">${formatCollectionName(collection)}</h5>
              <ul class="list-disc list-inside space-y-1">
                ${data.brokenLinks.map(item => `
                  <li class="text-sm text-red-800">
                    ${item.title} 
                    <span class="text-red-600">(${item.brokenUrl})</span>
                  </li>
                `).join('')}
              </ul>
            </div>
          `;
        }
      });
      brokenLinksList.innerHTML = linksHtml || '<p class="text-gray-500 text-sm">No broken links found.</p>';
    }
  }

  // Modal functionality
  const modal = document.getElementById('content-issues-modal');
  const viewIssuesBtn = document.getElementById('view-content-issues');
  const closeModalBtn = document.getElementById('close-modal');
  const closeModalFooterBtn = document.getElementById('close-modal-btn');

  if (modal && viewIssuesBtn && closeModalBtn && closeModalFooterBtn) {
    // Open modal
    viewIssuesBtn.addEventListener('click', () => {
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      populateContentIssues();
    });

    // Close modal functions
    const closeModal = () => {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    };

    closeModalBtn.addEventListener('click', closeModal);
    closeModalFooterBtn.addEventListener('click', closeModal);

    // Close on click outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  }
</script>

