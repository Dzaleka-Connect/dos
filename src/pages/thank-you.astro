---
import MainLayout from '../layouts/MainLayout.astro';

// Get the form type from URL parameters
const formType = Astro.url.searchParams.get('type') || 'default';

// Define messages for different form types
const messages = {
  visit: {
    title: 'Thank You for Planning Your Visit',
    message: 'We have received your visit request and are excited to welcome you to Dzaleka. Our team will review your details and contact you within 24-48 hours to confirm your visit arrangements.',
    nextSteps: [
      'Check your email for a confirmation of your request',
      'Review our visitor guidelines to prepare for your visit',
      'Feel free to contact us if you have any immediate questions'
    ]
  },
  'guide-registration': {
    title: 'Guide Application Received',
    message: 'Thank you for your interest in becoming a local guide with Visit Dzaleka. Our team will review your application and contact you within 7 business days.',
    nextSteps: [
      'Check your email for application confirmation',
      'Gather any identification documents that may be required',
      'If selected, you will be invited for an interview and orientation session',
      'You\'ll learn on the job with guidance from experienced team members'
    ]
  },
  legal: {
    title: 'Legal Support Application Received',
    message: 'Thank you for submitting your legal support application. Our team will review your case and contact you within 2-3 business days.',
    nextSteps: [
      'Review your email for a confirmation message',
      'Gather any additional documentation that might be requested',
      'Be available for follow-up contact from our legal team'
    ]
  },
  emergency: {
    title: 'Emergency Relief Request Submitted',
    message: 'Your emergency relief request has been received. Given the urgent nature, our team will prioritize your case and respond as soon as possible.',
    nextSteps: [
      'Keep your phone nearby for urgent contact',
      'Monitor your email for updates',
      'Document any changes in your situation'
    ]
  },
  leadership: {
    title: 'Leadership Support Application Received',
    message: 'Thank you for your interest in our leadership support programs. We will review your application and contact you within 5-7 business days.',
    nextSteps: [
      'Check your email for application confirmation',
      'Review our leadership resources while you wait',
      'Consider connecting with other community leaders'
    ]
  },
  advocacy: {
    title: 'Advocacy Campaign Request Submitted',
    message: 'Your advocacy campaign request has been received. Our team will review your proposal and reach out to discuss next steps.',
    nextSteps: [
      'Review the campaign materials you submitted',
      'Start gathering community support',
      'Prepare for a strategy discussion with our team'
    ]
  },
  default: {
    title: 'Thank You',
    message: 'Your submission has been received.',
    nextSteps: [
      'We will review your submission',
      'You will receive a confirmation email shortly'
    ]
  },
  profile: {
    title: 'Profile Created Successfully',
    message: 'Thank you for creating your skills exchange profile. Your profile will be reviewed and published within 24 hours.',
    nextSteps: [
      'Check your email for profile confirmation',
      'Browse other skills while you wait',
      'Prepare any additional materials you might need for teaching'
    ]
  },
  'profile-update': {
    title: 'Profile Update Request Received',
    description: 'Thank you for submitting your profile update request. Our team will review your changes and update your profile accordingly. You will receive a confirmation email once the changes are made.',
    cta: {
      text: 'View Skills Exchange',
      href: '/skills-exchange'
    }
  }
};

const currentMessage = messages[formType] || messages.default;
---

<MainLayout title={currentMessage.title}>
  <main class="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
      <div class="bg-white rounded-2xl shadow-sm p-8 md:p-12">
        {/* Success Icon */}
        <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-8">
          <svg class="h-10 w-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
        </div>

        {/* Title */}
        <h1 class="text-center text-3xl font-bold text-gray-900 mb-4">
          {currentMessage.title}
        </h1>

        {/* Message */}
        <p class="text-center text-lg text-gray-600 mb-8">
          {currentMessage.message || currentMessage.description}
        </p>

        {/* Next Steps */}
        {currentMessage.nextSteps && (
          <div class="bg-gray-50 rounded-xl p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Next Steps</h2>
            <ul class="space-y-4">
              {currentMessage.nextSteps.map(step => (
                <li class="flex items-start">
                  <svg class="h-6 w-6 text-green-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                  </svg>
                  <span class="text-gray-700">{step}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* CTA */}
        {currentMessage.cta && (
          <div class="text-center">
            <a 
              href={currentMessage.cta.href} 
              class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 transition-colors duration-300"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
              </svg>
              {currentMessage.cta.text}
            </a>
          </div>
        )}

        {/* Return to Home */}
        {!currentMessage.cta && (
          <div class="text-center">
            <a 
              href="/" 
              class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 transition-colors duration-300"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
              </svg>
              Return to Home
            </a>
          </div>
        )}
      </div>
    </div>
  </main>
</MainLayout>
