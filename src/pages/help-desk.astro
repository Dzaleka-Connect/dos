---
import MainLayout from '../layouts/MainLayout.astro';
import HelpDeskForm from '../components/HelpDeskForm.astro';
import { supportCategories } from '../data/support-categories';

const pageTitle = "Help Desk & Support Center";
const description = "Get support and assistance for Dzaleka Online Services. Our dedicated help desk provides assistance for technical issues, business services, community resources, and more. Fast response within 24-48 hours.";
const keywords = "help desk, support center, technical support, customer service, Dzaleka services, business support, community support, cultural support, education support, employment support, gallery support, event support, resource center";
const ogImage = "https://services.dzaleka.com/images/Visit_Dzaleka.png";

// Additional SEO metadata
const canonicalUrl = "https://services.dzaleka.com/help-desk";
const author = "Dzaleka Online Services";
const twitterHandle = "@dzalekaonline";
const ogType = "website";
const ogSiteName = "Dzaleka Online Services";

const faqs = [
  {
    question: "What is the typical response time?",
    answer: "We aim to respond to all inquiries within 24 hours. For urgent issues, we prioritize quick responses."
  },
  {
    question: "What information should I include in my request?",
    answer: "Please include your full name, contact information, and a detailed description of your issue or question. For technical issues, please provide any relevant error messages or screenshots."
  },
  {
    question: "What are your business hours?",
    answer: "Our support team is available Monday through Friday, 8:00 AM to 5:00 PM (Malawi Time). For urgent issues outside these hours, please use our emergency contact number."
  },
  {
    question: "What languages do you support?",
    answer: "We provide support in English, French, and Swahili. Please indicate your preferred language in your request."
  }
];

// Initialize form state
const errors = { name: "", email: "", message: "", category: "" };
let success = false;

// Handle form submission
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("name");
    const email = data.get("email");
    const message = data.get("message");
    const subject = data.get("_subject") || "New Support Request";
    
    // Validate the data
    if (typeof name !== "string" || name.length < 1) {
      errors.name = "Please enter your name";
    }
    if (typeof email !== "string" || !email.includes("@")) {
      errors.email = "Please enter a valid email";
    }
    if (typeof message !== "string" || message.length < 10) {
      errors.message = "Message must be at least 10 characters";
    }

    const hasErrors = Object.values(errors).some(msg => msg);
    
    if (!hasErrors) {
      // Submit to FormCarry
      const formData = new FormData();
      formData.append("name", name);
      formData.append("email", email);
      formData.append("message", message);
      formData.append("_subject", subject);
      formData.append("_replyto", email);
      formData.append("_next", "https://services.dzaleka.com/thank-you?type=support");
      
      const response = await fetch("https://formcarry.com/s/w40iBX_iU0b", {
        method: "POST",
        body: formData,
        headers: {
          "Accept": "application/json"
        }
      });

      if (response.ok) {
        success = true;
        return Astro.redirect("/thank-you?type=support");
      } else {
        throw new Error("Failed to submit form");
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Form submission error:", error.message);
    }
  }
}
---

<MainLayout 
  title={pageTitle}
  description={description}
  keywords={keywords}
  ogImage={ogImage}
  canonicalUrl={canonicalUrl}
  author={author}
  twitterHandle={twitterHandle}
  ogType={ogType}
  ogSiteName={ogSiteName}
>
  <!-- JSON-LD Structured Data for Help Desk -->
  <script type="application/ld+json" slot="head">
    {
      "@context": "https://schema.org",
      "@type": "CustomerService",
      "name": "Dzaleka Online Services Help Desk",
      "description": "Comprehensive support center for Dzaleka Online Services",
      "url": "https://services.dzaleka.com/help-desk",
      "telephone": "",
      "email": "dzalekaconnect@gmail.com",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "Dzaleka Refugee Camp",
        "addressRegion": "Dowa",
        "addressCountry": "Malawi"
      },
      "contactPoint": {
        "@type": "ContactPoint",
        "contactType": "customer service",
        "email": "dzalekaconnect@gmail.com",
        "availableLanguage": ["English", "French", "Swahili"]
      }
    }
  </script>

  <main class="min-h-screen bg-gray-50">
    <!-- Hidden data element for support categories -->
    <script id="support-categories-data" type="application/json" set:html={JSON.stringify(supportCategories)}></script>

    <!-- Hero Section -->
    <div class="relative h-[60vh] overflow-hidden">
      <!-- Background Image with Overlay -->
      <div class="absolute inset-0">
        <img
          src="/images/Visit_Dzaleka.png"
          alt="Dzaleka Help Desk"
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gray-900 bg-opacity-60"></div>
      </div>

      <!-- Hero Content -->
      <div class="relative h-full flex items-center justify-center text-center px-4">
        <div class="max-w-3xl">
          <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
            How Can We Help You Today?
          </h1>
          <p class="text-xl text-gray-200 mb-8">
            Get support for all Dzaleka Online Services. Our team is here to help.
          </p>
          <a
            href="#supportFormSection"
            class="inline-flex items-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
          >
            Get Support
            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </a>
        </div>
      </div>
    </div>

    <!-- Support Categories Grid -->
    <section class="py-16 bg-white">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <div class="text-center mb-12">
            <h2 class="text-3xl font-bold text-gray-900 mb-4">Support Categories</h2>
            <p class="text-gray-600">Select the category that best matches your needs</p>
          </div>

          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {supportCategories.map(category => (
              <button
                type="button"
                class="category-btn p-6 bg-white rounded-xl border-2 border-gray-200 hover:border-primary-500 transition-colors text-left shadow-sm hover:shadow-md"
                data-category={category.id}
              >
                <div class="text-primary-600 mb-3 w-8 h-8" set:html={category.icon} />
                <h3 class="font-medium text-gray-900 text-lg">{category.title}</h3>
                <p class="text-gray-500 text-sm mt-2">{category.description}</p>
              </button>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Support Form Section -->
    <section id="supportFormSection" class="py-16 bg-gray-50">
      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto">
          <div class="text-center mb-12">
            <h2 class="text-3xl font-bold text-gray-900 mb-4">Submit Your Request</h2>
            <p class="text-gray-600 max-w-2xl mx-auto">
              Select a category below and fill out the form to get started. Our support team will respond via email.
            </p>
          </div>

          <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
            <div class="p-6">
              <!-- Thank You Message (Hidden by default) -->
              <div id="thankYouMessage" class="hidden text-center py-8">
                <div class="mb-4">
                  <svg class="mx-auto h-12 w-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <h3 class="text-2xl font-bold text-gray-900 mb-2">Thank You!</h3>
                <p class="text-gray-600 mb-6">
                  Your support request has been submitted successfully. We'll get back to you as soon as possible.
                </p>
                <button
                  id="submitAnotherButton"
                  class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
                >
                  Submit Another Request
                </button>
              </div>

              <!-- Form (Hidden after submission) -->
              <div id="supportFormContainer">
                <HelpDeskForm />
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- FAQ Section -->
    <section id="faq" class="py-16 bg-white">
      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto">
          <div class="text-center mb-12">
            <h2 class="text-3xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h2>
            <p class="text-gray-600">Find quick answers to common questions</p>
          </div>

          <div class="space-y-6">
            {faqs.map((faq, index) => (
              <div class="bg-gray-50 rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-2">{faq.question}</h3>
                <p class="text-gray-600">{faq.answer}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Contact Info Section -->
    <section class="py-16 bg-gray-50">
      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto text-center">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">Still Need Help?</h2>
          <p class="text-gray-600 mb-6">
            If you can't find what you're looking for, feel free to contact us directly at
          </p>
          <a href="mailto:dzalekaconnect@gmail.com" class="text-primary-600 hover:text-primary-700">
            dzalekaconnect@gmail.com
          </a>
        </div>
      </div>
    </section>
  </main>

  <script>
    // Get the support categories data from the server
    const supportCategoriesData = JSON.parse(document.getElementById('support-categories-data')?.textContent || '[]');
    
    document.addEventListener('DOMContentLoaded', function() {
      // Handle category selection
      const categoryButtons = document.querySelectorAll('.category-btn');
      const form = document.getElementById('supportForm');
      const thankYouMessage = document.getElementById('thankYouMessage');
      const supportFormContainer = document.getElementById('supportFormContainer');
      const submitAnotherButton = document.getElementById('submitAnotherButton');
      
      if (!form || !thankYouMessage || !supportFormContainer || !submitAnotherButton) return;

      // Handle "Submit Another" button
      submitAnotherButton.addEventListener('click', function() {
        thankYouMessage.classList.add('hidden');
        supportFormContainer.classList.remove('hidden');
        form.reset();
        
        // Reset category selection
        categoryButtons.forEach(btn => btn.classList.remove('border-primary-500'));
        
        // Reset form header
        const categoryTitle = form.querySelector('.category-title');
        const categoryDescription = form.querySelector('.category-description');
        const categoryIcon = form.querySelector('.category-icon');
        
        if (categoryTitle) {
          categoryTitle.textContent = 'Select a Category';
          categoryTitle.className = 'text-2xl font-bold category-title text-gray-400';
        }
        if (categoryDescription) {
          categoryDescription.textContent = 'Choose a category above to get started';
          categoryDescription.className = 'text-gray-400 category-description';
        }
        if (categoryIcon) {
          categoryIcon.innerHTML = '❓';
          categoryIcon.className = 'text-3xl category-icon text-gray-400';
        }
      });

      // Handle form submission
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Show loading state
        const submitButton = form.querySelector('#submitButton') as HTMLButtonElement;
        const submitText = submitButton.querySelector('.submit-text') as HTMLElement;
        const loadingText = submitButton.querySelector('.loading-text') as HTMLElement;
        const submitIcon = submitButton.querySelector('.submit-icon') as HTMLElement;
        
        submitButton.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');
        submitIcon.classList.add('hidden');

        // Update _replyto with email value
        const emailInput = form.querySelector('input[name="email"]') as HTMLInputElement;
        const replyToInput = form.querySelector('input[name="_replyto"]') as HTMLInputElement;
        if (emailInput && replyToInput) {
          replyToInput.value = emailInput.value;
        }

        // Submit to FormCarry
        const formData = new FormData(form);
        fetch("https://formcarry.com/s/w40iBX_iU0b", {
          method: "POST",
          body: formData,
          headers: {
            "Accept": "application/json"
          }
        })
        .then(response => {
          if (response.ok) {
            // Show thank you message
            supportFormContainer.classList.add('hidden');
            thankYouMessage.classList.remove('hidden');
          } else {
            throw new Error('Form submission failed');
          }
        })
        .catch(error => {
          console.error('Form submission error:', error);
          // Reset button state
          submitButton.disabled = false;
          submitText.classList.remove('hidden');
          loadingText.classList.add('hidden');
          submitIcon.classList.remove('hidden');
        });
      });

      categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
          const categoryId = this.dataset.category;
          const category = supportCategoriesData.find(c => c.id === categoryId);
          
          if (category) {
            // Update subject field
            const subjectInput = form.querySelector('input[name="_subject"]');
            if (subjectInput) subjectInput.value = `${category.title} Support Request`;
            
            // Update visual state
            categoryButtons.forEach(btn => btn.classList.remove('border-primary-500'));
            this.classList.add('border-primary-500');
            
            // Update header
            const categoryTitle = form.querySelector('.category-title');
            const categoryDescription = form.querySelector('.category-description');
            const categoryIcon = form.querySelector('.category-icon');
            
            if (categoryTitle) {
              categoryTitle.textContent = category.title;
              categoryTitle.className = 'text-2xl font-bold category-title text-gray-900';
            }
            if (categoryDescription) {
              categoryDescription.textContent = category.description;
              categoryDescription.className = 'text-gray-600 category-description';
            }
            if (categoryIcon) {
              categoryIcon.innerHTML = category.icon;
              categoryIcon.className = 'text-3xl category-icon text-primary-600';
            }

            // Scroll to form
            document.getElementById('supportFormSection')?.scrollIntoView({ behavior: 'smooth' });
          }
        });
      });
    });
  </script>
</MainLayout>