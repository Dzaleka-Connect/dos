---
interface Props {
	title: string;
	description?: string;
	keywords?: string;
	ogImage?: string;
}

const { title, description, keywords, ogImage } = Astro.props;

// Default values
const defaultDescription = "Dzaleka Online Service - Your comprehensive platform for accessing refugee services, and community resources in Malawi. Supporting the Dzaleka refugee community with digital solutions.";
const defaultKeywords = "Dzaleka, refugee services, Malawi permits, visa application, community support, legal aid, emergency relief, refugee resources, online services, Dzaleka heritage, refugee camp, humanitarian aid";
const defaultOgImage = "/images/dzaleka-hero.jpeg";

// Use provided values or defaults
const metaDescription = description || defaultDescription;
const metaKeywords = keywords || defaultKeywords;
const metaOgImage = ogImage || defaultOgImage;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={metaDescription} />
		<meta name="keywords" content={metaKeywords} />
		<meta name="robots" content="index, follow" />
		<meta name="author" content="Dzaleka Online Services" />
		
		<!-- OpenGraph Meta Tags -->
		<meta property="og:title" content={title} />
		<meta property="og:description" content={metaDescription} />
		<meta property="og:image" content={metaOgImage} />
		<meta property="og:type" content="website" />
		
		<!-- Twitter Meta Tags -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={metaDescription} />
		<meta name="twitter:image" content={metaOgImage} />
		
		<link rel="icon" type="image/png" href="/images/dzaleka-digital-heritage.png" />
		<link rel="canonical" href={`https://services.dzaleka.com${Astro.url.pathname}`} />
		<meta name="generator" content={Astro.generator} />
		<title>{title} | Dzaleka Online Services</title>

		<!-- Slot for additional head content -->
		<slot name="head" />

		<!-- Google Analytics -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-V28XG9CN72" crossorigin="anonymous"></script>
		<script>
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'G-V28XG9CN72', {
				transport_url: 'https://ssl.google-analytics.com',
				cookie_flags: 'Secure;SameSite=None',
				send_page_view: true
			});
		</script>
	</head>
	<body class="flex flex-col min-h-screen pt-16">
		<slot />
		
		<!-- Site Analytics Tracking -->
		<script>
			window.addEventListener('DOMContentLoaded', async () => {
				try {
					const { 
						getAnalyticsData, 
						storeAnalyticsData,
						getSessionId,
						getVisitorId,
						getDeviceType,
						getBrowserName,
						trackInteraction,
						trackScrollDepth,
						trackPagePerformance,
						trackEngagement,
						trackErrors,
						trackWebVitals,
						trackUserJourney,
						trackContentInteraction,
						trackPageView,
						backupAnalyticsData,
						restoreFromBackup
					} = await import('../utils/analytics-utils.js');
					
					// Listen for storage changes
					window.addEventListener('storage', async (e) => {
						if (e.key === 'dzaleka_analytics') {
							// Storage was cleared or modified
							const data = await getAnalyticsData();
							if (!data) {
								// Try to restore from backup
								const restored = await restoreFromBackup();
								if (restored) {
									await storeAnalyticsData(restored);
								}
							}
						}
					});

					// Warn before clearing site data
					window.addEventListener('beforeunload', (e) => {
						if (document.hasStorageAccess && !document.hasStorageAccess()) {
							const msg = 'Warning: Clearing site data will erase analytics. Export your data first.';
							e.returnValue = msg;
							return msg;
						}
					});

					// Initialize page view tracking
					let data = await trackPageView();
					
					// Get session ID after trackPageView
					const sessionId = getSessionId();
					const visitorId = getVisitorId();
					
					// Add geolocation tracking
					async function getLocationData() {
						try {
							// First try IP-based geolocation (doesn't require permission)
							const response = await fetch('https://ipapi.co/json/');
							const ipData = await response.json();
							
							return {
								country: ipData.country_name,
								region: ipData.region,
								city: ipData.city,
								source: 'ip'
							};
						} catch (error) {
							console.warn('IP geolocation failed:', error);
							
							// Fallback to browser geolocation if available
							if (navigator.geolocation) {
								try {
									const position = await new Promise((resolve, reject) => {
										navigator.geolocation.getCurrentPosition(resolve, reject);
									});
									
									return {
										latitude: position.coords.latitude,
										longitude: position.coords.longitude,
										accuracy: position.coords.accuracy,
										source: 'browser'
									};
								} catch (geoError) {
									console.warn('Browser geolocation failed:', geoError);
									return null;
								}
							}
							return null;
						}
					}

					// Update session data
					data.sessions = data.sessions || {};
					const timestamp = new Date().toISOString();
					
					// Get location data
					const locationData = await getLocationData();
					if (locationData) {
						data.locations = data.locations || {};
						data.locations[sessionId] = locationData;
					}
					
					// Initialize device and browser stats if they don't exist
					data.devices = data.devices || {};
					data.browsers = data.browsers || {};
					
					// Get current device and browser info
					const deviceType = getDeviceType();
					const browserName = getBrowserName();
					
					// Initialize visitor data structure if it doesn't exist
					data.visitors = data.visitors || {};
					const today = timestamp.split('T')[0];
					data.visitors[today] = data.visitors[today] || [];
					
					if (!data.sessions[sessionId]) {
						data.sessions[sessionId] = {
							startTime: timestamp,
							lastActive: timestamp,
							pageViews: 1,
							pages: [window.location.pathname],
							entryPage: window.location.pathname,
							device: deviceType,
							browser: browserName,
							screenSize: `${window.innerWidth}x${window.innerHeight}`,
							language: navigator.language || 'unknown',
							visitorId: visitorId
						};
					} else {
						data.sessions[sessionId].lastActive = timestamp;
						data.sessions[sessionId].pageViews += 1;
						data.sessions[sessionId].pages.push(window.location.pathname);
					}
					
					// Update device stats for every page view
					data.devices[deviceType] = (data.devices[deviceType] || 0) + 1;
					
					// Update browser stats for every page view
					data.browsers[browserName] = (data.browsers[browserName] || 0) + 1;
					
					// Update visitor data
					if (!data.visitors[today].includes(visitorId)) {
						data.visitors[today].push(visitorId);
						// Store the first visit time for new visitors
						data.visitorFirstVisits = data.visitorFirstVisits || {};
						data.visitorFirstVisits[visitorId] = data.visitorFirstVisits[visitorId] || timestamp;
					}
					
					// Update referrer data if coming from external site
					if (document.referrer && !document.referrer.includes(window.location.hostname)) {
						data.referrers = data.referrers || {};
						const referrerDomain = new URL(document.referrer).hostname;
						data.referrers[referrerDomain] = (data.referrers[referrerDomain] || 0) + 1;
					}
					
					// Update timestamps
					data.lastVisit = timestamp;
					if (!data.firstVisit) {
						data.firstVisit = timestamp;
					}
					
					// Initialize new tracking features
					trackErrors(data);
					trackWebVitals(data);
					data = trackUserJourney(data);
					trackContentInteraction(data);
					
					// Track user engagement
					document.addEventListener('click', () => {
						data = trackEngagement(data, 'click');
						storeAnalyticsData(data);
					});
					
					// Track form submissions
					document.addEventListener('submit', () => {
						data = trackEngagement(data, 'form');
						storeAnalyticsData(data);
					});
					
					// Track page unload to record time spent
					window.addEventListener('beforeunload', async () => {
						const timeSpent = Date.now() - new Date(data.sessions[sessionId].lastActive).getTime();
						data.sessions[sessionId].timeOnPage = data.sessions[sessionId].timeOnPage || {};
						data.sessions[sessionId].timeOnPage[window.location.pathname] = timeSpent;
						await storeAnalyticsData(data);
					});

					// Track scroll depth
					trackScrollDepth();
					
					// Track page performance
					const performance = trackPagePerformance();
					if (performance) {
						data.sessions[sessionId].performance = performance;
						await storeAnalyticsData(data);
					}
					
					// Track clicks on interactive elements
					document.addEventListener('click', (e) => {
						const target = e.target.closest('a, button, [role="button"]');
						if (target) {
							trackInteraction('click', {
								type: target.tagName.toLowerCase(),
								text: target.textContent?.trim(),
								href: target.href,
								id: target.id,
								class: target.className
							});
						}
					});

					// Track client-side navigation
					const originalPushState = history.pushState;
					history.pushState = function() {
						originalPushState.apply(this, arguments);
						trackPageView();
					};
					window.addEventListener('popstate', trackPageView);

				} catch (error) {
					console.error('Error recording page view:', error);
				}
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), rgb(var(--accent-light)) 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #F6F6F6;
		background-size: 224px;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>